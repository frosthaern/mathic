# Azure Pipeline for Next.js application

trigger:
- main  # Triggers the pipeline on pushes to the 'main' branch

# Configure pipeline variables
# These can be overridden in the Azure DevOps UI or in variable groups
variables:
  # Azure Resource Manager service connection name (created in Project Settings > Service connections)
  azureSubscription: 'mathic-connection'  # Update this to match your service connection name
  
  # Azure resources
  webAppName: 'mathic-app-$(Build.BuildId)'  # Will be overridden by pipeline variable
  resourceGroupName: 'mathic-rg'             # Will be overridden by pipeline variable
  
  # Build configuration
  nodeVersion: '20.x'
  buildConfiguration: 'production'

stages:
- stage: Test
  displayName: 'Test and Lint'
  jobs:
  - job: Test
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: NodeTool@0
      displayName: 'Install Node.js $(nodeVersion)'
      inputs:
        versionSource: 'spec'
        versionType: 'version'
        versionSpec: '$(nodeVersion)'
    
    - script: |
        npm ci --prefer-offline
      displayName: 'Install Dependencies'
      
    - script: |
        npm run test:ci
      displayName: 'Run Tests'
      env:
        CI: true
    
    - script: |
        npm run lint
      displayName: 'Run Lint'
      continueOnError: true  # Don't fail the build on linting warnings

- stage: Build
  displayName: 'Build and Package'
  dependsOn: Test
  jobs:
  - job: Build
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: NodeTool@0
      displayName: 'Install Node.js $(nodeVersion)'
      inputs:
        versionSource: 'spec'
        versionType: 'version'
        versionSpec: '$(nodeVersion)'
    
    - script: |
        npm ci --prefer-offline
      displayName: 'Install Dependencies'
    
    - script: |
        npm run build
      displayName: 'Build Application'
      env:
        NODE_ENV: $(buildConfiguration)
    
    - task: ArchiveFiles@2
      displayName: 'Create deployment package'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
        replaceExistingArchive: true
    
    - publish: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
      displayName: 'Publish Artifact'
      artifact: drop

- stage: Deploy
  displayName: 'Deploy to Azure'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: Deploy
    environment: 'production'
    pool:
      vmImage: 'ubuntu-latest'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadBuildArtifacts@0
            displayName: 'Download Build Artifacts'
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'drop'
              downloadPath: '$(System.ArtifactsDirectory)'
          
          - task: AzureWebApp@1
            displayName: 'Deploy to Azure Web App'
            inputs:
              azureSubscription: '$(azureSubscription)'
              appType: 'webAppLinux'
              appName: '$(webAppName)'
              package: '$(System.ArtifactsDirectory)/**/*.zip'
              runtimeStack: 'NODE|20-lts'
              startUpCommand: 'npm start'
              
          - script: |
              echo "##vso[task.setvariable variable=webAppUrl]https://$(webAppName).azurewebsites.net"
            displayName: 'Set Web App URL variable'
            
    - script: |
        echo "Deployment completed successfully!"
        echo "Your app is available at: https://$(webAppName).azurewebsites.net"
      displayName: 'Display Web App URL'
